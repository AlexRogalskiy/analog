import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        junitVersion = '5.3.2'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.5.0'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

version = '0.11'
sourceCompatibility = 1.11
targetCompatibility = 1.11

bootJar {
    archiveName = 'analog.jar'
    manifest {
        attributes(
                "Implementation-Title": "AnaLog",
                "Implementation-Version": version,
                "Implementation-Vendor": "Toparvion"
        )
    }
}

//<editor-fold desc="Задачи по работе с Docker-образами">
docker {
    url = project['docker.url']
    registryCredentials {
        url = project['docker.registry.url']
        username = project['docker.registry.username']
        password = project['docker.registry.password']
        email = project['docker.registry.email']
    }
}
task createDockerfile(type: Dockerfile) {
    description 'Генерирует Dockerfile для сборки образа микросервиса'
    group 'docker'

    from 'openjdk:10-jdk-slim'
    // все дальнейшие команды будут разрешать пути внутри контейнера относительно этой:
    workingDir "/analog"
    // копируем исполняемый файл микросервиса:
    copyFile bootJar.archiveName, bootJar.archiveName
    // копируем файлы конфигурации:
    copyFile 'config/', 'config/'
    // монтируем директории для сохранения данных мониторинга и Tomcat'а между перезапусками:
    // volume "/microservice/work", "/microservice/log"
    environmentVariable 'APP_NAME', project.name
    // формируем команду на запуск:
    entryPoint 'java'
    // вся команда на запуск будет выглядеть 'java -X... -jar restorun.jar'
    defaultCommand '-Xmx256M', '-XX:MaxMetaspaceSize=256M', '-XX:+HeapDumpOnOutOfMemoryError',
                   '-jar', "${bootJar.archiveName}"
}

task syncImageFiles(type: Sync) {
    description 'Копирует в директорию build/docker файлы микросервиса для сборки образа'
    group 'docker'

    dependsOn assemble
    from bootJar.archivePath
    into createDockerfile.destFile.parentFile
    // отдельно указываем, что файлы конфигурации нужно положить в директорию config
    into 'config/', {
        from 'config/'
    }
}
createDockerfile.dependsOn syncImageFiles

task buildImage(type: DockerBuildImage) {
    description 'Собирает и загружает в Docker образ микросервиса'

    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "${project.name}:${project.version}"
}

task dockerVersion(type: DockerVersion) {
    description 'Выводит информацию о версии Docker'
}
task dockerInfo(type: DockerInfo) {
    description 'Выводит общие сведения об используемом экземпляре Docker'
}
//</editor-fold>

test {
    useJUnitPlatform()
}

repositories {
    // mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

dependencies {
    // Backend compile deps
//    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot' , name: 'spring-boot-starter-websocket'
    compile group: 'net.bull.javamelody', name: 'javamelody-spring-boot-starter', version: '1.72.0'

    compile group: 'org.springframework.integration', name: 'spring-integration-file'
    compile group: 'org.springframework.integration', name: 'spring-integration-rmi'

    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compile group: 'net.sf.jtidy', name: 'jtidy', version: 'r938'
    compile group: 'com.github.mpkorstanje', name: 'simmetrics-core', version: '4.1.1'

    // Frontend deps
    compile group: 'org.webjars', name: 'angularjs', version: '1.5.8'
    compile group: 'org.webjars', name: 'highlightjs', version: '9.8.0'
    compile group: 'org.webjars', name: 'jquery', version: '1.11.1'
    compile group: 'org.webjars.npm', name: 'jquery.scrollto', version: '2.1.2'
    compile group: 'org.webjars', name: 'sockjs-client', version: '1.1.2'
    compile group: 'org.webjars.npm', name: 'stomp__stompjs', version: '3.1.2'
    // compile group: 'org.webjars', name: 'bootstrap', version: '3.3.7' // imported as downloaded themed version
    compile group: 'org.webjars', name: 'angular-ui-select', version: '0.19.6'
    compile group: 'org.webjars.npm', name: 'balloon-css', version: '0.5.0'

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    runtime group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // Test deps
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    // JUnit family
    testCompileOnly 'junit:junit:4.12'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVersion}"
}

junitPlatform {
    enableStandardTestTask = true
}

startScripts {
    enabled = false
}
